flowchart TD
    %% Frontend Layer
    FE["`**Frontend - Backtest.js**
    - YAML Strategy File
    - Data Provider Selection
    - Initial Capital
    - TimeFrame
    - Start/End Dates`"]
    
    %% API Layer
    API["`**API Routes**
    /api/backtest/run`"]
    
    %% Main Processing Flow
    subgraph "Backend Processing"
        direction TB
        
        %% Route Handler
        ROUTE["`**Route Handler**
        - Validate Request
        - Extract User Info
        - Create BacktestConfig`"]
        
        %% Backtest Engine
        ENGINE["`**Backtest Engine**
        execute_backtest()`"]
        
        %% Background Processing
        BG["`**Background Task**
        _run_backtest_background()`"]
        
        %% Core Processing Steps
        subgraph "Processing Steps"
            direction TB
            PARSE["`**Strategy Parser**
            parse_yaml_strategy()
            - Parse YAML
            - Extract symbols
            - Create Lumibot strategy`"]
            
            DATA["`**Data Provider**
            fetch_market_data()
            - Initialize provider
            - Fetch OHLCV data
            - Validate completeness`"]
            
            SIM["`**Simulation Engine**
            - Initialize Lumibot
            - Run backtest
            - Execute trades`"]
            
            CALC["`**Metrics Calculator**
            calculate_metrics()
            - Performance stats
            - Risk metrics
            - Trade analysis`"]
        end
    end
    
    %% Data Storage Layer
    subgraph "Data Layer"
        direction LR
        EXEC_DB["`**Execution DB**
        BacktestExecution
        - Status tracking
        - Progress updates`"]
        
        RESULT_DB["`**Results DB**
        BacktestResults
        - Performance metrics
        - Trade history
        - Equity curve`"]
    end
    
    %% External Services
    subgraph "External Services"
        direction TB
        YAHOO["`**Yahoo Finance**
        Free market data`"]
        ALPACA["`**Alpaca Markets**
        Premium data`"]
        POLYGON["`**Polygon.io**
        Professional data`"]
    end
    
    %% Response Flow
    STATUS_API["`**Status API**
    /api/backtest/status/{id}`"]
    RESULTS_API["`**Results API**
    /api/backtest/results/{id}`"]
    
    %% Main Flow
    FE -->|POST request| API
    API --> ROUTE
    ROUTE --> ENGINE
    ENGINE -->|Create execution record| EXEC_DB
    ENGINE --> BG
    
    %% Background Processing Flow
    BG --> PARSE
    PARSE --> DATA
    DATA --> YAHOO
    DATA --> ALPACA
    DATA --> POLYGON
    DATA --> SIM
    SIM --> CALC
    CALC -->|Save results| RESULT_DB
    
    %% Status and Results Flow
    FE -->|Poll status| STATUS_API
    STATUS_API --> EXEC_DB
    FE -->|Get results| RESULTS_API
    RESULTS_API --> RESULT_DB
    
    %% Update flows
    BG -.->|Update status| EXEC_DB
    
    %% Styling
    classDef frontend fill:#e1f5fe,stroke:#01579b,stroke-width:2px
    classDef backend fill:#f3e5f5,stroke:#4a148c,stroke-width:2px
    classDef storage fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px
    classDef external fill:#fff3e0,stroke:#e65100,stroke-width:2px
    
    class FE frontend
    class API,ROUTE,ENGINE,BG,PARSE,DATA,SIM,CALC,STATUS_API,RESULTS_API backend
    class EXEC_DB,RESULT_DB storage
    class YAHOO,ALPACA,POLYGON external